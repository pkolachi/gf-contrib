# UDTranslate
------------------------------------
------- dependency configurations for UDTranslate.gf
------------------------------------

-++ REGULAR FUNCTIONS from the grammar
-+  Core dependents of clausal predicates

PredVPS   : NP -> VPS -> S ;  nsubj head
PredVPS   : NP -> VPS -> S ;  nsubj:cop head
PredVPS   : NP -> VPS -> S ;  nsubjpass head
PredSCVPS : SC -> VPS -> S ;  csubj head 
PredSCVPS : SC -> VPS -> S ;  csubj:cop head 
PredSCVPS : SC -> VPS -> S ;  csubjpass head 

-- to construct passives VPs, helper functions are used
-- tried to change this on 5th September, 2017  
-- To use the morph constraint Voice=Pass to lift VPSlash to VPs 
-- Additional helper functions are defined only to handle tenses 
-- for passives 
-- turned out to be a really bad choice 
-- since helper functions corresponding to passives are also applied
-- to regular VP functions like SlashV2a and UseV. That results in 
-- bad GF trees because tense is applied to wrong VP.
-- -- PassVPSlash      : VPSlash -> VP ;                               Voice=Pass
-- -- PassAgentVPSlash : VPSlash -> NP -> VP ;    head   nmod          Voice=Pass
-- -- PassAgentVPSlash : VPSlash -> NP -> VP ;    head   nmod:agent    Voice=Pass


-- -- ComplSlash : VPSlash -> NP -> VP ;  head  dobj
ComplVS : VS -> S -> VP  ;  head  ccomp 
ComplVQ : VQ -> QS -> VP ;  head  ccomp 
ComplVA : VA -> AP -> VP ;  head  xcomp 
ComplVV : VV -> VP -> VP ;  aux   head         VerbForm=Inf    -- matches modal verbs
-- ComplVV : VV -> VP -> VP ;  head xcomp                      -- now handled using ComplVPIVV
ComplVPIVV : VV -> VPI -> VP  ;  head  xcomp
---DirectComplVQ : Temp -> NP -> VQ -> QS -> S ;
---DirectComplVS : Temp -> NP -> VS -> Utt -> S ;

---ComplA2 : A2 -> NP -> AP ;  head  nmod         -- this is correct 
---ComplN2 : N2 -> NP -> CN ;  head  nmod         -- but should be handled using language specific rules 
---ComplN3 : N3 -> NP -> N2 ;  head  nmod         -- because case of complements is encoded in the lexicon

--SlashV2a    : V2 -> VPSlash ; 
Slash2V3    : V3 -> NP -> VPSlash  ;  head  iobj 
Slash3V3    : V3 -> NP -> VPSlash  ;  head  dobj 
SlashV2S    : V2S -> S -> VPSlash  ;  head  ccomp 
SlashV2Q    : V2Q -> QS -> VPSlash ;  head  ccomp 
SlashV2A    : V2A -> AP -> VPSlash ;  head  xcomp 
SlashV2V    : V2V -> VP -> VPSlash ;  head  xcomp 
---SlashV2VNP  : V2V -> NP -> VPSlash -> VPSlash ;  head dobj  xcomp
SlashVV     : VV -> VPSlash -> VPSlash ;     aux   head    VerbForm=Inf   -- match modal verbs
SlashVV     : VV -> VPSlash -> VPSlash ;     head  xcomp
---SlashVS     : NP -> VS -> SSlash -> ClSlash ;  nsubj  head  ccomp
---SlashVP     : NP -> VPSlash -> ClSlash ;  nsubj head 
---SlashVPS    : NP -> VPSlash -> SSlash ;   nsubj head
---SlashPrep   : Cl -> Prep -> ClSlash ;   head   case
---VPSlashPrep : VP -> Prep -> VPSlash ;   head   case

-++ Noun dependents

-+  (noun phrases and modifiers)

DetCN    : Det -> CN -> NP    ;  det  head 
DetNP    : Det -> NP          ; 
PredetNP : Predet -> NP -> NP ;  det:predet  head 
PredetNP : Predet -> NP -> NP ;  det  head 
---DetQuant    : Quant -> Num -> Det ;
---DetQuantOrd : Quant -> Num -> Ord -> Det ;
PossPron : Pron -> Quant ;          Poss=Yes    -- better to guard this with morph. constraint 
---GenNP    : NP -> Quant   ;               -- handled in language specific using helper functions
---VocNP    : NP -> Voc     ;               -- handled in helper functions for PhrUtt*

ApposCN  : CN -> NP -> CN  ;   head  appos 
ApposCN  : CN -> NP -> CN  ;   head  compound 
ApposCN  : CN -> NP -> CN  ;   head  name 
ApposNP  : NP -> NP -> NP  ;   head  appos 
ApposNP  : NP -> NP -> NP  ;   head  compound 
ApposNP  : NP -> NP -> NP  ;   head  name 

--- Different degrees of adjectives are included in the lexicon 
--- as seperate entries, bad_A/worse_A/worst_A 
--- Thus using these constrained versions reduces the performance
--- Reverting back to simple PositA without any constraints
--PositA     : A -> AP   ;     Degree=Pos
PositA     : A -> AP   ;
UseComparA : A -> AP   ;     Degree=Cmp
OrdSuperl  : A -> Ord  ;     Degree=Sup

PositA   : A -> AP         ;
AdjCN    : AP -> CN -> CN  ;   amod  head 
---AdvCN : CN -> Adv -> CN ;   head  nmod     -- avoid since it increases ambiguity 
AdvNP 	 : NP -> Adv -> NP ;   head  advmod 
AdvNP 	 : NP -> Adv -> NP ;   head  nmod 
AdvNP 	 : NP -> Adv -> NP ;   head  acl      -- if Adv comes from SubjS or GerundAdv
AdvAP    : AP -> Adv -> AP ;   head  nmod 
AdvAP    : AP -> Adv -> AP ;   head  advmod 

AdjOrd   : Ord -> AP ;
AdnCAdv  : CAdv -> AdN ;
DetDAP   : Det -> DAP ;
----CAdvAP   : CAdv -> AP -> NP -> AP ;
----ComparA  : A -> NP -> AP          ;   head    nmod
----ComparAdvAdj : CAdv -> A -> NP -> Adv ;
----ComparAdvAdjS : CAdv -> A -> S -> Adv ;
----MassNP   : CN -> NP ;
----CountNP  : Det -> NP -> NP        ;   det   head
----PartNP   : CN -> NP -> CN         ;   nmod  head 
----PossNP   : CN -> NP -> CN         ;   nmod  head 
----AdjDAP   : DAP -> AP -> DAP ;
----CNNumNP  : NP -> Card -> NP ;
----OrdNumeralSuperl : Numeral -> A -> Ord ;

NumCard  : Card -> Num ;
----NumDigits  : Digits -> Card ;
----NumNumeral : Numeral -> Card ;
----OrdDigits  : Digits -> Ord ;
----OrdNumeral : Numeral -> Ord ;
----IDig : Dig -> Digits ;


-+  (predicate/clausal modifiers)

SentAP   : AP -> SC -> AP  ;        head   acl
SentCN   : CN -> SC -> CN  ;        head   acl 
RelCN    : CN -> RS -> CN  ;        head   acl
RelCN    : CN -> RS -> CN  ;        head   acl:relcl
RelNP    : NP -> RS -> NP  ;        head   acl
RelNP    : NP -> RS -> NP  ;        head   acl:relcl

-++ Compounding and unanalyzed nominals

CompoundN  : N -> N -> N  ;   compound  head 
CompoundAP : N -> A -> AP ;   compound  head

PrefixCard : Card -> Card -> Card ;      compound  head
-+  (names)
-- (this should be changed for next version to next line)
PrefixPN : PN -> PN -> PN ;              name  head 
PrefixPN : PN -> PN -> PN ;              head  name           -- (in case names are compositional like "Computer Science Department")
PrefixPN : PN -> PN -> PN ;              compound  head
PrefixPN : PN -> PN -> PN ;              head  compound
PrefixSymb : Symb -> Symb -> Symb ;      head  foreign
PrefixSymb : Symb -> Symb -> Symb ;      head  goeswith 
UseQuantPN : Quant -> PN -> NP ;         det  head 

-++ Non-core dependents of clausal predicates
-+  (nominal and adverbial modifiers)

PositAdAAdj : A -> AdA ;
PositAdvAdj : A -> Adv ;
AdVVP      : AdV -> VP -> VP     ;        advmod  head 
AdVVPSlash : AdV -> VPSlash -> VPSlash ;  advmod  head
----AdvVPSlash : VPSlash -> Adv -> VPSlash ;   head   nmod   -- does this increase ambiguity? almost seems to break everything?
AdvVPS     : VPS -> Adv -> VPS   ;  head  advmod
AdvVPS     : VPS -> Adv -> VPS   ;  head  advcl
AdvVPS     : VPS -> Adv -> VPS   ;  head  nmod
AdvVPS     : VPS -> Adv -> VPS   ;  head  nmod:npmod
AdvVPS     : VPS -> Adv -> VPS   ;  head  nmod:tmod
AdAP       : AdA -> AP -> AP     ;  advmod  head 
--AdAP       : AdA -> AP -> AP     ;  amod    head             -- to be verified 
AdAdV      : AdA -> AdV -> AdV   ;  advmod  head
--AdAdV      : AdA -> AdV -> AdV   ;  amod    head
AdAdv      : AdA -> Adv -> Adv   ;  advmod  head 
--AdAdv      : AdA -> Adv -> Adv   ;  amod    head 
AdNum      : AdN -> Card -> Card ;  advmod  head
AddAdvQVPS : QVPS -> IAdv -> QVPS ;  head   nmod        -- to be added
AdvS       : Adv -> S -> S       ;  advmod  head 
AdvS       : Adv -> S -> S       ;  advcl   head
ExtAdvS    : Adv -> S -> S       ;  advmod  head 
----ExtAdvVP   : VP -> Adv -> VP ;
----PresPartAP : VP -> AP ;
----PastPartAP : VPSlash -> AP ;
----PastPartAgentAP : VPSlash -> NP -> AP ;

-+  (predicate/clausal modifiers)

-++ Relative predicate constructors
-++ RP is inconsistently annotated, (that,SCONJ,PronType=Rel,mark) and (which|who|whose,PRON,PronType=Rel,nsubj)
-++ Case of "that" is handled using helper functions
-++ Check when dobj label is used for RPs -- to do

RelVPS   : RP -> VPS -> RS      ;  nsubj  head
RelVPS   : RP -> VPS -> RS      ;  nsubjpass  head
RelSSlash: RP -> SSlash  -> RS  ;  dobj  head
RelS     : S -> RS -> S         ;  head  advcl 
SSubjS   : S -> Subj -> S -> S  ;  head  mark  advcl
SubjS    : Subj -> S -> Adv     ;  mark  head 
----FocusObjS : NP -> SSlash -> S ;
----FunRP     : Prep -> NP -> RP -> RP ;

-++ Case-marking, prepositions, possesive
PrepIP   : Prep -> IP -> IAdv ; case head 
PrepNP   : Prep -> NP -> Adv ; case head 


-++ Other constructors from GF Modules

----ReflA2 : A2 -> AP ;
----ReflVP : VPSlash -> VP ;




-+  Questions

ComplSlashIP : VPSlash -> IP -> QVP ;    head   dobj
----QuestV2
IdetIP      : IDet -> IP ;
IdetCN      : IDet -> CN -> IP ;         det    head
----IdetQuant  : IQuant -> Num -> IDet ;
QuestVPS    : IP -> VPS -> QS ;          nsubj  head
QuestVPS    : IP -> VPS -> QS ;          nsubj:cop   head
QuestSlash  : IP -> ClSlash -> QCl ;     dobj   head 
QuestIAdv   : IAdv -> Cl -> QCl ;        advmod head 
QuestSSlash : IP -> SSlash -> QS ;       dobj   head
QuestSIAdv  : IAdv -> S -> QS ;          advmod head
QuestSIAdv  : IAdv -> S -> QS ;          mark   head
----QuestIComp : IComp -> NP -> QCl ;    head   nsubj 
----QuestIComp : IComp -> NP -> QCl ;    head   nsubj:cop 
----AdvIAdv    : IAdv -> Adv -> IAdv ;
----AdvIP      : IP -> Adv -> IP ;       head   nmod
----AdvQVP     : VP -> IAdv -> QVP ;

EmbedQS    : QS -> SC ;
----EmbedS     : S -> SC ;
----EmbedVP    : VP -> SC ;


-+  Idioms

---ProgrVP    : VP -> VP ;               -- helper functions handle this function
---SelfAdvVP  : VP -> VP ;
---SelfAdVVP  : VP -> VP ;
---SelfNP     : NP -> NP ;
---ExistNP    : NP -> Cl ;               -- helper functions handle this function
---ExistNPAdv : NP -> Adv -> Cl ;        -- helper functions handle this function
---ExistIP    : IP -> QCl ;              -- helper functions handle this function?
---ExistIPAdv : IP -> Adv -> QCl ;       -- helper functions handle this function?
---CleftNP    : NP -> RS -> Cl ;         -- helper functions handle this function
---CleftAdv   : Adv -> S -> Cl ;         -- helper functions handle this function?
---ImpersCl   : VP -> Cl ;               -- helper functions handle this function
---GenericCl  : VP -> Cl ;               -- helper functions do not handle this function
---ImpPl1     : VP -> Utt ;
---ImpP3      : NP -> VP -> Utt ;
---ImpVP      : VP -> Imp ;

-+  Constructions

----ByVP  : VP -> Adv ;
----InOrderToVP : VP -> Adv ;
----InLanguage : Language -> Adv ;
----monthN : Month -> N ;
----monthPN : Month -> PN ;
----monthAdv : Month -> Adv ;
----intYear : Int -> Year ;
----yearAdv : Year -> Adv ;
----monthYearAdv : Month -> Year -> Adv ;
----dayMonthAdv : Monthday -> Month -> Adv ;
----dayMonthYearAdv : Monthday -> Month -> Year -> Adv ;
----timeunitAdv : Card -> Timeunit -> Adv ;
----weekdayN : Weekday -> N ;
----weekdayPN : Weekday -> PN ;
----weekdayNextAdv : Weekday -> Adv ;
----weekdayLastAdv : Weekday -> Adv ;
----weekdayHabitualAdv : Weekday -> Adv ;
----weekdayPunctualAdv : Weekday -> Adv ;




ParaTaxis  : Utt -> Utt -> Utt ;            head  parataxis
ParaTaxis_ : Utt -> Punct -> Utt -> Utt ;   head  punct  parataxis
ParaTaxis_ ph1 p ph2 = ParaTaxis ph1 ph2

-+  Copula constructions and related functions

CompAP   : AP -> Comp ; 
CompAdv  : Adv -> Comp ; 
CompIAdv : IAdv -> IComp ; 
CompIP   : IP -> IComp ; 
CompNP   : NP -> Comp ; 
----CompCN   : CN -> Comp ;

-+  Tense constructor

----TPres  : Tense ;
----TPast  : Tense ;
----TFut   : Tense ;
----TCond  : Tense ;
----ASimul : Ant ;
----AAnter : Ant ;
----TTAnt  : Tense -> Ant -> Temp ;

-+  Use* functions for various types
UseN       : N -> CN ; 
UsePron    : Pron -> NP ; 
UsePN      : PN -> NP ; 
UseV       : V -> VP ; 
----UseN2      : N2 -> CN ;
----Use2N3     : N3 -> N2 ;
----Use3N3     : N3 -> N2 ;
----UseA2      : A2 -> AP ;
----UseVC      : Temp -> Pol -> VC -> VPS ;
----UseSlash   : Temp -> Pol -> ClSlash -> SSlash ;
----UseComp    : Comp -> VP ;

-+  Mk* constructor functions
MkSymb        : String -> Symb  ;    udtag=X 
MkSymb        : String -> Symb  ;    udtag=SYM
----MkVPI  : VP -> VPI
----SlashVPS : Temp -> Pol -> VPSlash -> SSlash ;   aux neg  head
----MkVPS  : Temp -> Pol -> VP -> VPS ;     aux  neg head
----MkQVPS : Temp -> Pol -> QVP -> QVPS ; 
PConjConj  : Conj -> PConj ;   

-+  Utt* functions for building top level utterances ;
-+  (reducing these heavily reduces ambiguity with loss of coverage)
UttAP     : AP -> Utt ; 
UttAdV    : AdV -> Utt ;
UttAdv    : Adv -> Utt ; 
-- -- UttCN     : CN -> Utt ;
-- -- UttCard   : Card -> Utt ;
-- -- UttIAdv   : IAdv -> Utt ;
-- -- UttIP     : IP -> Utt ;
-- -- UttInterj : Interj -> Utt ; 
-- -- UttImpSg  : Pol -> Imp -> Utt ;
-- -- UttImpPl  : Pol -> Imp -> Utt ;
-- -- UttImpPol : Pol -> Imp -> Utt ;
UttNP     : NP -> Utt ; 
UttQS     : QS -> Utt ;
UttS      : S -> Utt ; 
UttVPS    : VPS -> Utt ; 

-+  Top function in UDTranslate grammar 
-+  (handled mostly in helper functions)

-- -- PhrUtt      : PConj -> Utt -> Voc -> Phr ;   conj  head  vocative
TopPhr      : Phr -> Top ; 
TopPhrPunct : Phr -> Punct -> Top ; head punct 

-++ Other functions to facilitate UDTranslate

StringCard  : String -> Card  ;    udtag=NUM      NumType=Card 
StringOrd   : String -> Ord   ;    udtag=NUM      NumType=Ord
StringPN    : String -> PN    ;
StringPunct : String -> Punct ;    udtag=PUNCT
PrefixForeign : Symb -> Symb -> Symb ;  foreign   head
PrefixForeign : Symb -> Symb -> Symb ;  head      foreign
PrefixForeign : Symb -> Symb -> Symb ;  head      goeswith
PrefixForeign : Symb -> Symb -> Symb ;  goeswith  head
PrefixForeign : Symb -> Symb -> Symb ;  head      list

-- these functions should only be included in WMTUDTranslate grammar
-- -- -- StringN       : String -> N     ;    udtag=NOUN
-- -- -- StringN2      : String -> N2    ;    udtag=NOUN
-- -- -- StringN3      : String -> N3    ;    udtag=NOUN
-- -- -- StringA       : String -> A     ;    udtag=ADJ
-- -- -- StringA2      : String -> A2    ;    udtag=ADJ
-- -- -- StringV       : String -> V     ;    udtag=VERB
-- -- -- StringV2      : String -> V2    ;    udtag=VERB
-- -- -- StringV3      : String -> V3    ;    udtag=VERB
-- -- -- StringVV      : String -> VV    ;    udtag=VERB
-- -- -- StringVA      : String -> VA    ;    udtag=VERB
-- -- -- StringVS      : String -> VS    ;    udtag=VERB
-- -- -- StringVQ      : String -> VQ    ;    udtag=VERB
-- -- -- StringV2V     : String -> V2V   ;    udtag=VERB
-- -- -- StringAdV     : String -> AdV   ;    udtag=ADV
-- -- -- StringConj    : String -> Conj  ;    udtag=CONJ
-- -- -- StringPron    : String -> Pron  ;    udtag=PRON     PronType=Prs
-- -- -- StringPrDet   : String -> Det   ;    udtag=PRON     PronType=Rel
-- -- -- StringRP      : String -> RP    ;    udtag=PRON     PronType=Rel
-- -- -- StringIP      : String -> IP    ;    udtag=PRON     PronType=Int
-- -- -- StringDet     : String -> Det   ;    udtag=DET
-- -- -- StringInterj  : String -> Interj ;   udtag=INTJ
-- -- -- StringPrep    : String -> Prep  ;    udtag=ADP
-- -- -- StringSubj    : String -> Subj  ;    udtag=SCONJ
-- -- -- StringAdvSubj : String -> Subj  ;    udtag=ADV      PronType=Int
-- -- -- StringIAdv    : String -> IAdv  ;    udtag=ADV      PronType=Int
-- -- -- StringAdv     : String -> Adv   ;


------------------------------------

-++ helper functions

-+  Core dependents of clausal predicates

ComplV2_ : V2 -> NP -> VP ; head dobj 
ComplV2_ : V2 -> NP -> VP ; head nmod 
ComplV2_ : V2 -> NP -> VP ; head nmod:npmod 
ComplV2_ : V2 -> NP -> VP ; head nmod:tmod 
ComplV2_ v np = ComplSlash (SlashV2a v) np


-+  Coordination constructions


-- coordinations have been changed. 
-- for co-ordinations of two items, no helper functions needed
BaseAdv  : Adv  -> Adv  -> ListAdv  ;      head  conj
BaseAdV  : AdV  -> AdV  -> ListAdV  ;      head  conj
BaseCN   : CN   -> CN   -> ListCN   ;      head  conj
--BaseDet  : Det  -> Det  -> ListDet  ;      head  conj
BaseNP   : NP   -> NP   -> ListNP   ;      head  conj
BaseAP   : AP   -> AP   -> ListAP   ;      head  conj
BaseRS   : RS   -> RS   -> ListRS   ;      head  conj
BaseS    : S    -> S    -> ListS    ;      head  conj
BaseVPS  : VPS  -> VPS  -> ListVPS  ;      head  conj
----BaseQVPS : QVPS -> QVPS -> ListQVPS ;      head  conj
ConjAdv  : Conj -> ListAdv  -> Adv  ;      cc  head 
ConjAdV  : Conj -> ListAdV  -> AdV  ;      cc  head
ConjCN   : Conj -> ListCN   -> CN   ;      cc  head
--ConjDet  : Conj -> ListDet  -> Det  ;      cc  head
ConjNP   : Conj -> ListNP   -> NP   ;      cc  head
ConjAP   : Conj -> ListAP   -> AP   ;      cc  head
ConjRS   : Conj -> ListRS   -> RS   ;      cc  head
ConjS    : Conj -> ListS    -> S    ;      cc  head
ConjVPS  : Conj -> ListVPS  -> VPS  ;      cc  head
----ConjQVPS : Conj -> ListQVPS -> QVPS ;      cc  head

--  becase these  functions are exocentric, there is no risk
--  they are applied towards the end to give the correct UD tree

--  helper functions required to handle co-ordination of two items
--  without an explicit Conjunction
----- ConjAdv_  : Punct -> ListAdv -> Adv ;     cc  head 

--  problems start to appear when co-ordination of more than two items
--  occur. The grammar uses Cons* functions to add a new item 
--  "in front of" the List* element. On the other hand UD adds new items
--  "to end of"   the List* element. Below are how we can add items per
--  UD regulations
ConsAdv  : Adv  -> ListAdv  -> ListAdv ;   conj  head
--  because the List* element was created in the first place using the
--  first element in the coordination, this configuration helps to add
--  new items. However, GF defines that the new element being added in
--  Cons* should be added to the front of the list, linearizing such
--  a tree using the concrete syntax would mess-up the order of the
--  elements in the list. 
--  Note, this configuration is wrong when going from GF to UD. 
--  In such instances, the correct configuration would be 
--  ConsAdv   : Adv -> ListAdv -> ListAdv ;   head   conj
--  This creates a hierarchical dependency structure unlike the flat
--  structure used in UD .
--  The configuration of ConsAdv is also dangerous- because it
--  is an endocentric function now.
--  Nonetheless, having this configurations is a good? robust way 
--  to handle arbitrary # of coordinations in UD2GF for coverage
--  purposes 

ConsAdV  : AdV  -> ListAdV  -> ListAdV ;   conj  head
ConsCN   : CN   -> ListCN   -> ListCN  ;   conj  head
--ConsDet  : Det  -> ListDet  -> ListDet ;   conj  head
ConsNP   : NP   -> ListNP   -> ListNP  ;   conj  head
ConsAP   : AP   -> ListAP   -> ListAP  ;   conj  head
ConsRS   : RS   -> ListRS   -> ListRS  ;   conj  head
ConsS    : S    -> ListS    -> ListS   ;   conj  head
ConsVPS  : VPS  -> ListVPS  -> ListVPS ;   conj  head
----ConsQVPS : QVPS -> ListQVPS -> ListQVPS ;  conj  head

--  now we can define helper functions to get rid of pesky
--  punct types. It is an identity function simply to cover
--  punct types in UD2GF. The concrete syntax automatically
--  adds these when linearizing the tree 
----DropCoLAdv_  : Comma_ -> ListAdv -> ListAdv ;   punct  head 
----DropCoLAdV_  : Comma_ -> ListAdV -> ListAdV ;   punct  head 
----DropCoLCN_   : Comma_ -> ListCN  -> ListCN  ;   punct  head 
----DropCoLDet_  : Comma_ -> ListDet -> ListDet ;   punct  head 
----DropCoLNP_   : Comma_ -> ListNP  -> ListNP  ;   punct  head 
----DropCoLAP_   : Comma_ -> ListAP  -> ListAP  ;   punct  head 
----DropCoLRS_   : Comma_ -> ListRS  -> ListRS  ;   punct  head 
----DropCoLS_    : Comma_ -> ListS   -> ListS   ;   punct  head 
----DropCoLVPS_  : Comma_ -> ListVPS -> ListVPS ;   punct  head 
----DropCoLQVPS_ : Comma_ -> ListQVPS -> ListQVPS ;   punct  head 
DropCoLAdv_  : Punct -> ListAdv -> ListAdv ;   punct  head 
DropCoLAdV_  : Punct -> ListAdV -> ListAdV ;   punct  head 
DropCoLCN_   : Punct -> ListCN  -> ListCN  ;   punct  head 
DropCoLDet_  : Punct -> ListDet -> ListDet ;   punct  head 
DropCoLNP_   : Punct -> ListNP  -> ListNP  ;   punct  head 
DropCoLAP_   : Punct -> ListAP  -> ListAP  ;   punct  head 
DropCoLRS_   : Punct -> ListRS  -> ListRS  ;   punct  head 
DropCoLS_    : Punct -> ListS   -> ListS   ;   punct  head 
DropCoLVPS_  : Punct -> ListVPS -> ListVPS ;   punct  head 
----DropCoLQVPS_ : Punct -> ListQVPS -> ListQVPS ;   punct  head 
DropCoLAdv_ pu Lx = Lx
DropCoLAdV_ pu Lx = Lx
DropCoLCN_  pu Lx = Lx
DropCoLDet_ pu Lx = Lx
DropCoLNP_  pu Lx = Lx
DropCoLAP_  pu Lx = Lx
DropCoLRS_  pu Lx = Lx
DropCoLS_   pu Lx = Lx
DropCoLVPS_ pu Lx = Lx
----DropCoLQVPS_ pu Lx = Lx

--  we also need helper functions to handle `no-Conj' constructions.
--  Two symbols, "/" and "&" are used as Conj with cc labels
AmpConjAdv_   : Amp_ -> ListAdv -> Adv ;  cc  head 
AmpConjAdV_   : Amp_ -> ListAdV -> AdV ;  cc  head 
AmpConjCN_    : Amp_ -> ListCN  -> CN  ;  cc  head 
--AmpConjDet_   : Amp_ -> ListDet -> Det ;  cc  head 
AmpConjNP_    : Amp_ -> ListNP  -> NP  ;  cc  head 
AmpConjAP_    : Amp_ -> ListAP  -> AP  ;  cc  head 
AmpConjRS_    : Amp_ -> ListRS  -> RS  ;  cc  head 
AmpConjS_     : Amp_ -> ListS   -> S   ;  cc  head 
AmpConjVPS_   : Amp_ -> ListVPS -> VPS ;  cc  head 
----AmpConjQVPS_  : Amp_ -> ListQVPS -> QVPS ;  cc  head 
AmpConjAdv_ a Lx = (ConjAdv amp_Conj Lx)
AmpConjAdV_ a Lx = (ConjAdV amp_Conj Lx)
AmpConjCN_  a Lx = (ConjCN  amp_Conj Lx)
--AmpConjDet_ a Lx = (ConjDet amp_Conj Lx)
AmpConjNP_  a Lx = (ConjNP  amp_Conj Lx)
AmpConjAP_  a Lx = (ConjAP  amp_Conj Lx)
AmpConjRS_  a Lx = (ConjRS  amp_Conj Lx)
AmpConjS_   a Lx = (ConjS   amp_Conj Lx)
AmpConjVPS_ a Lx = (ConjVPS amp_Conj Lx)
----AmpConjQVPS_  a Lx = (ConjQVPS amp_Conj Lx)

OrConjAdv_   : Orslash_ -> ListAdv -> Adv ;  cc  head 
OrConjAdV_   : Orslash_ -> ListAdV -> AdV ;  cc  head 
OrConjCN_    : Orslash_ -> ListCN  -> CN  ;  cc  head 
--OrConjDet_   : Orslash_ -> ListDet -> Det ;  cc  head 
OrConjNP_    : Orslash_ -> ListNP  -> NP  ;  cc  head 
OrConjAP_    : Orslash_ -> ListAP  -> AP  ;  cc  head 
OrConjRS_    : Orslash_ -> ListRS  -> RS  ;  cc  head 
OrConjS_     : Orslash_ -> ListS   -> S   ;  cc  head 
OrConjVPS_   : Orslash_ -> ListVPS -> VPS ;  cc  head 
----OrConjQVPS_  : Orslash_ -> ListQVPS -> QVPS ;  cc  head 
OrConjAdv_ a Lx = (ConjAdv or_Conj Lx)
OrConjAdV_ a Lx = (ConjAdV or_Conj Lx)
OrConjCN_  a Lx = (ConjCN  or_Conj Lx)
--OrConjDet_ a Lx = (ConjDet or_Conj Lx)
OrConjNP_  a Lx = (ConjNP  or_Conj Lx)
OrConjAP_  a Lx = (ConjAP  or_Conj Lx)
OrConjRS_  a Lx = (ConjRS  or_Conj Lx)
OrConjS_   a Lx = (ConjS   or_Conj Lx)
OrConjVPS_ a Lx = (ConjVPS or_Conj Lx)
----OrConjQVPS_a Lx = (ConjQVPS or_Conj Lx)

 
-- Previous work by Aarne on handling two place coordinations
---++ConjAdv_  : Conj -> Adv  -> Adv -> Adv ;      cc head conj 
---++ConjAdV_  : Conj -> AdV  -> AdV -> AdV ;      cc head conj 
---++ConjCN_   : Conj -> CN -> CN -> CN ;          cc head conj
---++ConjDet_  : Conj -> Det -> Det -> Det ;       cc head conj
---++ConjNP_   : Conj -> NP -> NP -> NP ;          cc head conj 
---++ConjAP_   : Conj -> AP -> AP -> AP ;          cc head conj 
---++ConjRS_   : Conj -> RS  -> RS  -> RS ;        cc head conj 
---++ConjS_    : Conj -> S  -> S  -> S ;           cc head conj 
---++ConjVPS_  : Conj -> VPS  -> VPS  -> VPS ;     cc head conj 
---++----ConjQVPS_ : Conj -> QVPS -> QVPS -> QVPS ;    cc head conj
---++ConjAdv_ c x y = ConjAdv c (BaseAdv x y)
---++ConjAdV_ c x y = ConjAdV c (BaseAdV x y)
---++ConjCN_  c x y = ConjCN  c (BaseCN  x y)
---++ConjDet_ c x y = ConjDet c (BaseDet x y)
---++ConjNP_  c x y = ConjNP  c (BaseNP  x y)
---++ConjAP_  c x y = ConjAP  c (BaseAP  x y)
---++ConjRS_  c x y = ConjRS  c (BaseRS  x y)
---++ConjS_   c x y = ConjS   c (BaseS   x y)
---++ConjVPS_ c x y = ConjVPS c (BaseVPS x y)
---++----ConjQVPS_ c x y = ConjQVPS c (BaseQVPS x y)
---++
---++ConjAdv3_ : Adv -> Punct -> Adv -> Conj -> Adv -> Adv ;  head punct conj cc conj
---++ConjAdv3_ : Adv -> Conj -> Adv -> Conj -> Adv -> Adv ;  head cc conj cc conj
---++ConjAdv3_ x p y c z = ConjAdv c (ConsAdv x (BaseAdv y z))
---++
---++ConjAP3_  : AP -> Punct -> AP -> Conj -> AP -> AP ;      head punct conj cc conj 
---++ConjAP3_  : AP -> Punct -> AP -> Conj -> AP -> AP ;      head cc conj cc conj
---++ConjAP3_ x p y c z = ConjAP c (ConsAP x (BaseAP y z))
---++
---++ConjNP3_  : NP -> Punct -> NP -> Conj -> NP -> NP ;      head punct conj cc conj 
---++ConjNP3_  : NP -> Punct -> NP -> Conj -> NP -> NP ;      head cc conj cc conj
---++ConjNP3_ x p y c z = ConjNP c (ConsNP x (BaseNP y z))
---++
---++ConjRS3_  : RS -> Punct -> RS -> Conj -> RS -> RS ;      head punct conj cc conj
---++ConjRS3_  : RS -> Punct -> RS -> Conj -> RS -> RS ;      head cc conj cc conj
---++ConjRS3_ x p y c z = ConjRS c (ConsRS x (BaseRS y z))
---++
---++ConjS3_   : S -> Punct -> S -> Conj -> S -> S ;          head punct conj cc conj 
---++ConjS3_   : S -> Punct -> S -> Conj -> S -> S ;          head cc conj cc conj
---++ConjS3_ x p y c z = ConjS c (ConsS x (BaseS y z))
---++
---++ConjVPS3_ : VPS -> Punct -> VPS -> Conj -> VPS -> VPS ;  head punct conj cc conj 
---++ConjVPS3_ : VPS -> Punct -> VPS -> Conj -> VPS -> VPS ;  head cc conj cc conj
---++ConjVPS3_ x p y c z = ConjVPS c (ConsVPS x (BaseVPS y z))
---++

-+  Noun constructions

PossSgCN_ : Pron -> CN -> NP ;  nmod:poss  head   Number=Sing 
PossSgCN_ pron cn = DetCN (DetQuant (PossPron pron) NumSg) cn
PossPlCN_ : Pron -> CN -> NP ;  nmod:poss  head   Number=Plur 
PossPlCN_ pron cn = DetCN (DetQuant (PossPron pron) NumPl) cn

-- this works when GenNP can not be used, 
-- either due to lack of nmod:poss or presence 
-- of explicit GenMark_ as a seperate token like in English
GenSgCN_  : Quant -> CN -> NP ;    nmod:poss  head   Number=Sing
GenSgCN_  : Quant -> CN -> NP ;    nmod  head        Number=Sing
GenPlCN_  : Quant -> CN -> NP ;    nmod:poss  head   Number=Plur
GenPlCN_  : Quant -> CN -> NP ;    nmod  head        Number=Plur
GenSgCN_  q cn = DetCN (DetQuant q NumSg) cn
GenPlCN_  q cn = DetCN (DetQuant q NumPl) cn

DetGenNPSg_ : NP -> CN -> NP ;    nmod:poss  head    Number=Sing 
DetGenNPPl_ : NP -> CN -> NP ;    nmod:poss  head    Number=Plur 
DetGenNPSg_ np cn = DetCN (DetQuant (GenNP np) NumSg) cn
DetGenNPPl_ np cn = DetCN (DetQuant (GenNP np) NumPl) cn

QuantSgCN_  : Quant  -> CN -> NP ;   det  head    Number=Sing 
QuantPlCN_  : Quant  -> CN -> NP ;   det  head    Number=Plur 
IQuantSgCN_ : IQuant -> CN -> IP ;   det  head    Number=Sing 
IQuantPlCN_ : IQuant -> CN -> IP ;   det  head    Number=Plur 
QuantSgCN_  qu cn = DetCN  (DetQuant  qu NumSg) cn
QuantPlCN_  qu cn = DetCN  (DetQuant  qu NumPl) cn
IQuantSgCN_ qu cn = IdetCN (IdetQuant qu NumSg) cn
IQuantPlCN_ qu cn = IdetCN (IdetQuant qu NumPl) cn

NumQuantCN_    : Card ->  Quant -> CN -> NP ;   nummod  det  head 
NumIQuantCN_   : Card -> IQuant -> CN -> IP ;   nummod  det  head 
NumNoQuantCN_  : Card -> CN -> NP ;             nummod  head 
NumQuantCN_  num qu cn = DetCN  (DetQuant  qu (NumCard num)) cn
NumIQuantCN_ num qu cn = IdetCN (IdetQuant qu (NumCard num)) cn
NumNoQuantCN_ num cn   = DetCN  (DetQuant IndefArt (NumCard num)) cn

----*UseQuantPN_ : Quant -> PN -> NP ;    det head
----*UseQuantPN_ q pn = UseQuantPN q pn

DetPredVPS_   : Det  -> VPS -> S ;             nsubj  head
DetPredVPS_ q vps = PredVPS (DetNP q) vps
IDetQuestVPS_ : IDet -> VPS -> QS ;            nsubj head
IDetQuestVPS_ q vps = QuestVPS (IdetIP q) vps

EmbedCNVP_  : CN -> VP -> CN ; head acl
EmbedCNVP_ cn vp = SentCN cn (EmbedVP vp)

-+  Other forms of VP

PresPartAP_      : VP -> AP ;                          VerbForm=Part   Tense=Pres
-- PresPartAP_      : VP -> AP ;                          VerbForm=Ger
PastPartAP_      : VPSlash -> AP ;                     VerbForm=Part   Tense=Past
PastPartAgentAP_ : VPSlash -> NP -> AP ;   head nmod   VerbForm=Part   Tense=Past
PresPartAP_ vp               = PresPartAP vp
PastPartAP_ vpslash          = PastPartAP vpslash
PastPartAgentAP_  vpslash np = PastPartAgentAP vpslash np

-+  Sentence constructions

EmbedVP_    : InfMark_ -> VP -> SC ;                 mark  head        VerbForm=Inf 
-- EmbedComp_  : InfMark_ -> FuCop_ -> Comp -> SC ;     mark  cop  head
EmbedS_     : ThatMark_ -> S -> SC ;                 mark  head 
-- EmbedQS_    : ThatMark_ -> QS -> SC ;                mark  head
EmbedVP_ m vp = EmbedVP vp
-- EmbedComp_ m _ c = EmbedVP (UseComp c)
EmbedS_ m s = EmbedS s
-- EmbedQS_ m s = EmbedQS s

----EmbedIP

MarkS_    : ThatMark_ -> S -> S ;                  mark  head 
MarkVP_   : InfMark_ -> VP -> VPI ;                mark  head                VerbForm=Inf
-- these variants are not added in VPS.labels so that MarkVP_ is sufficient
-- MarkComp_ : InfMark_ -> FuCop_ -> Comp -> VPI ;    mark  cop  head
-- MarkPassVPSlash_      : InfMark_ -> InfAuxPass_ -> VPSlash -> VPI ;                 mark  auxpass  head                 Voice=Pass
-- MarkPassAgentVPSlash_ : InfMark_ -> InfAuxPass_ -> VPSlash -> NPby8agent_ -> VPI ;  mark  auxpass  head  nmod           Voice=Pass
-- MarkPassAgentVPSlash_ : InfMark_ -> InfAuxPass_ -> VPSlash -> NPby8agent_ -> VPI ;  mark  auxpass  head  nmod:agent     Voice=Pass
MarkS_                m    s         = s
MarkVP_               m   vp         = MkVPI vp
-- MarkComp_             m _ comp       = MkVPI (UseComp comp)
-- MarkComp_           m _ comp       = InOrderToVP (UseComp comp)
-- MarkPassVPSlash_      m _ vpslash    = MkVPI (PassVPSlash vpslash)
-- MarkPassAgentVPSlash_ m _ vpslash np = MkVPI (PassAgentVPSlash vpslash np)

RelVPS_    : ThatMark_ -> VPS -> RS ;      mark head
RelSSlash_ : ThatMark_ -> SSlash -> RS ;   mark head
RelVPS_ m vps  = RelVPS IdRP vps
RelSSlash_ m s = RelSSlash IdRP s

-+  Reflexives

cat ReflPron_ = Pron
-- write formation rules for reflexive pronouns in language-specific configurations

ReflVP_    : VPSlash -> ReflPron_ -> VP ;   head  dobj
SelfAdVVP_ : VP -> ReflPron_ -> VP ;        head  nmod
SelfAdVVP_ : VP -> ReflPron_ -> VP ;        head  nmod:npmod
SelfAdvVP_ : VP -> ReflPron_ -> VP ;        head  nmod
SelfAdvVP_ : VP -> ReflPron_ -> VP ;        head  nmod:npmod
SelfNP_    : NP -> ReflPron_ -> NP ;        head  nmod
SelfNP_    : NP -> ReflPron_ -> NP ;        head  nmod:npmod
ReflVP_ vpslash _ = ReflVP vpslash
SelfAdVVP_ vp _   = SelfAdVVP vp 
SelfAdvVP_ vp _   = SelfAdvVP vp
SelfNP_ np _      = SelfNP np


-+  Handling punctuations
-++ Letting Comma_ be dropped from the sentence to improve coverage 
----DropCoAdv_    : Comma_ -> Adv -> Adv ;    punct   head 
----DropCoNP_     : Comma_ -> NP  -> NP  ;    punct   head 
----DropCoS_      : Comma_ -> S   -> S   ;    punct   head 
----DropCoAdv_ pu x = x 
----DropCoNP_  pu x = x 
----DropCoS_   pu x = x 

-+  Utterance constructions

UttImpVP_    : VP -> Utt ;                                VerbForm=Fin  Mood=Imp 
UttNegImpVP_ : Neg_ -> VP -> Utt ;      head  neg         VerbForm=Fin  Mood=Imp 
UttImpVP_ vp      = UttImpSg PPos (ImpVP vp)
UttNegImpVP_ p vp = UttImpSg PNeg (ImpVP vp)
----UttImpPl
----UttImpPol
---- UttInterjS_ : Interj -> Utt -> Utt ; discourse head   -- PK
---- UttInterjS_ i u = (UttInterj i)

PhrUttNovoc_    : Utt -> Phr ;
PhrUttVoc_      : Utt -> Voc -> Phr ;           head  vocative 
PhrUttPConj_    : PConj -> Utt -> Phr ;         conj  head
PhrUttConjVoc_  : Conj -> Utt -> Voc -> Phr ;   conj  head  vocative
PhrUttPConjVoc_ : PConj -> Utt -> Voc -> Phr ;  conj  head  vocative
PhrUttNovoc_ utt          = PhrUtt NoPConj utt NoVoc
PhrUttVoc_ utt np         = PhrUtt NoPConj utt np
PhrUttPConj_ pc utt       = PhrUtt pc utt NoVoc
PhrUttConjVoc_  c utt np  = PhrUtt (PConjConj c) utt np
PhrUttPConjVoc_ pc utt np = PhrUtt pc utt np


-- backup construction functions

*  AdvBackup     : Adv -> Backup ;
*  APBackup      : AP -> Backup ;
*  NPBackup      : NP -> Backup ;
*  VPBackup      : VP -> Backup ;
*  VPIBackup     : VPI -> Backup ;
*  VPSBackup     : VPS -> Backup ;
*  VPSlashBackup : VPSlash -> Backup ;
*  DetBackup     : Det -> Backup ;
*  QuantBackup   : Quant -> Backup ;
*  InterjBackup  : Interj -> Backup ;
*  OrdBackup     : Ord -> Backup ;
*  PNBackup      : PN -> Backup ;
*  PrepBackup    : Prep -> Backup ;
*  PunctBackup   : Punct -> Backup ;
*  ConjBackup    : Conj -> Backup ;
*  SymbBackup    : Symb -> Backup ;
*  SBackup       : S -> Backup ;
*  QSBackup      : QS -> Backup ;
*  SCBackup      : SC -> Backup ;
*  SubjBackup    : Subj -> Backup ;
*  UttBackup     : Utt -> Backup ;
*  PhrBackup     : Phr -> Backup ;
*  TopBackup     : Top -> Backup ;

-- eliminated backup application functions
--- other backup application functions are built-in

BackupA c b    = c -- BackupAP (PositA c) b
BackupCop_ c b = b --
BackupN c b    = c -- BackupNP (MassNP (UseN c)) b


-------------------------------------
-- categories
--------------------------------------

-+  OPEN classes
N       NOUN 
N2      NOUN
N3      NOUN
N       PROPN                     -- Iranians, Portuguese, Iraqi
PN      PROPN 
String  PROPN 
NP      NOUN

V       VERB 
V2      VERB 
--V2    ADJ                       -- possible to construct an AP without consuming anything 
                                  -- using type-raising functions
V3      VERB
VV      VERB
VA      VERB 
VV      AUX	-- VerbForm=Fin
VS      VERB 
VQ      VERB
V2V     VERB 
V2A     VERB
V2S     VERB
V2Q     VERB
VP      VERB                      -- for copula

A       ADJ
A2      ADJ
--AdA     ADJ                       -- entries like "pretty", "less", "much"
-- AdN     ADJ                    -- unverified. "about" marked as ADJ

AdA     ADV   
AdN     ADV
AdV     ADV 
Adv     ADV
CAdv    ADV                       -- no entries exist in the lexicon
IAdv    ADV   -- PronType=Int 

-- -- PK (UD_ADJ can be Adv using AdAdv function), can be adjectives can be transformed to modifiers Adv using PositAdvAdj?)
Interj  INTJ 
Voc     INTJ                      -- please?

-- +++ CLOSED classes

Conj    CONJ 
PConj   CONJ

Det     DET
Quant   DET    -- PronType=Art    -- In english, a, an, the 
Predet  DET
IDet    DET    -- PronType=Int
IQuant  DET    -- PronType=Int 
IP      DET    -- PronType=Int
Pron    PRON   -- PronType=Prs 
NP      PRON 
Det     PRON   -- PronType=Rel
RP      PRON   -- PronType=Rel
IP      PRON   -- PronType=Int
Prep    ADP 
Prep    SCONJ 
Subj    SCONJ 
Subj    ADV    -- PronType=Int

Punct   PUNCT
String  PUNCT

-- -- Quant   PRON PronType=Rel      -- PK (probably an error, that left one Iraqi dead)

-- +++ NUMERAL classes
-- Num     NUM
-- Numer   NUM
-- Numeral NUM
-- Dig     NUM
-- Digit   NUM
-- Float   NUM
-- Int     NUM
Card    NUM    NumType=Card 
String  NUM    NumType=Card 

-- +++ SEMANTIC lexical types
Language    NOUN
Language    PROPN
Month	    NOUN
Month	    PROPN
Timeunit    NOUN
Timeunit    PROPN
Weekday	    NOUN
Weekday	    PROPN
Year        NUM  
Monthday    NUM

-- +++ NOISY classes
Symb    SYM  
Symb    X  

-- ##############  UNUSED FUNCTIONS included in the grammar but removed from conversion by commenting things out ; 

-- ++ Functions used in Translate grammar but not in UDTranslate grammar

-- -- PredVP     : NP -> VP -> Cl  ;   nsubj   head 
-- -- PredVP     : NP -> VP -> Cl  ;   nsubjpass   head 
-- -- PredVP     : NP -> VP -> Cl  ;   nsubj:cop   head 
-- -- PredSCVP   : SC -> VP -> Cl  ;   csubj   head 
-- -- PredSCVP   : SC -> VP -> Cl  ;   csubjpass   head 
-- -- PredSCVP   : SC -> VP -> Cl  ;   csubj:cop   head
-- -- SlashVP    : NP -> VPSlash -> ClSlash ;  nsubj  head 
-- -- AdvVP      : VP -> Adv -> VP ;   head   advmod 
-- -- AdvVP      : VP -> Adv -> VP ;   head   advcl        -- If Adv is GerundAdv
-- -- AdvVP      : VP -> Adv -> VP ;   head   nmod 
-- -- AdvVP      : VP -> Adv -> VP ;   head   nmod:npmod 
-- -- AdvVP      : VP -> Adv -> VP ;   head   nmod:tmod 
-- -- RelVP      : RP -> VP -> RCl ;   mark   head 
-- -- RelSlash   : RP -> ClSlash -> RCl ;   mark  head 
-- -- RelCl      : RP -> Cl -> RCl ;   mark   head
-- -- QuestVP    : IP -> VP -> QCl ;   nsubj head 
-- -- QuestVP    : IP -> VP -> QCl ;   nsubj:cop head 
-- -- QuestSlash : IP -> ClSlash -> QCl ;     dobj   head 
-- -- QuestIAdv  : IAdv -> Cl -> QCl ;        advmod head 
-- -- QuestCl    : Cl -> QCl ;
-- -- UseCl      : Temp -> Pol -> Cl -> S ;
-- -- UseRCl     : Temp -> Pol -> RCl -> RS ;
-- -- UseQCl     : Temp -> Pol -> QCl -> QS ;
-- -- UttVP      : VP -> Utt ;
-- -- AddAdvQVP  : QVP -> IAdv -> QVP ;  head nmod
